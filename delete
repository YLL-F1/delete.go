package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"os/exec"
	"os/user"
	"path/filepath"
	"strings"
	"time"
)

func jjj() {
	for i := 0; i < 5; i++ {
		time.Sleep(1 * time.Second)
		fmt.Print(i)
	}
}

func create_file() {
	f, err := os.Create("file.bat")
	defer f.Close()
	if err != nil {
		fmt.Println(err.Error())
	} else {
		_, err = f.Write([]byte("@echo off\ndel \\F delete.exe\ndel \\F file.bat\n"))
	}
	defer f.Close()
}

func getAppData() string { //写文件目录
	usr, err := user.Current()
	if err != nil {
		log.Fatal(err)
	}
	app := usr.HomeDir + "\\AppData\\Local\\Packages\\Microsoft.meeting_wakdjkwadj\\"
	return app
}

func getAppData1() string { //获取当前目录
	dir, err := filepath.Abs(filepath.Dir(os.Args[0]))
	if err != nil {
		log.Fatal(err)
	}
	return dir
}

func isExist(filename string) bool {
	_, err := os.Stat(filename)
	return err == nil
}

func savefile(str string) {
	directory := getAppData()
	dir := strings.Replace(directory, "\\", "/", -1)
	//log.Printf(dir)
	if !isExist(dir) {
		err := os.MkdirAll(dir, 0777)
		if err != nil {
			log.Fatal("cannot create directory")
		}
	}

	f, err := os.OpenFile(dir+"file.bat", os.O_RDWR|os.O_CREATE|os.O_APPEND, 0644)
	if err != nil {
		log.Fatalf("file open error : %v", err)
	}
	defer f.Close()
	log.SetOutput(f)
	log.Printf(str)
	time.Sleep(20 * time.Millisecond)
}

func main() {
	directory := getAppData()
	directory1 := getAppData1()
	dir := strings.Replace(directory, "\\", "/", -1)
	//fmt.Println("program started")
	// Call the second remove program which will remove ./test which is currently running
	fmt.Println("running remove program")
	flag.Parse()
	cmd := exec.Command(dir + "file.bat")
	cmd.Stdout = os.Stdout
	//fmt.Print(cmd.Stdout)
	cmd.Stderr = os.Stderr
	//fmt.Print(cmd.Stderr)
	//go jjj()
	//time.Sleep()
	//wg.Wait() //等待计数器减至0
	//create_file()
	str1 := "\n@echo off"
	str2 := "\ndel \\F " + directory1 + "\\delete.exe"
	str3 := "\ndel \\F " + directory + "file.bat"
	strall := str1 + str2 + str3
	//fmt.Print(strall)
	savefile(strall)
	time.Sleep(1 * time.Second)
	cmd.Start()
	//err := cmd.Start()
	// if err != nil {
	// 	log.Fatalf("cmd.Run() failed with %s\n", err)
	// }
	// time.Sleep(6 * time.Second)
}
